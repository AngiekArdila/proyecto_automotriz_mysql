USE automotriz;

-- 1. Obtener el historial de reparaciones de un vehículo específico

Select v.placa, r.*
from vehiculos as v inner join reparaciones as r on v.VehiculoID = r.VehiculoID
where v.placa="JHK123";

-- 2. Calcular el costo total de todas las reparaciones realizadas por un empleado
-- específico en un período de tiempo

select e. nombre, sum(r.CostoTotal) As CostoTotal
from reparaciones as r inner join empleados as e on r.EmpleadoID= e.EmpleadoID
where r.fecha between '2023-02-10' and '2023-10-20' and e.nombre='John'
Group by e.nombre;
 
 -- 3. subconsultas  Obtener los proveedores que suministran las piezas más caras
 
 select * from piezas;
 select * from proveedores;
 
 select CONCAT(pro.nombre,' ',pro.apellido) as nombre_proveedor,p.nombre, p.precio 
 from proveedores as pro 
 inner join piezas as p on pro.ProveedorID=p.ProveedorID
 Where Precio = (select MAX(Precio) From Piezas);
 
 -- 4 Listar todos los clientes y los vehículos que poseen
 
 
 select c.Nombre,c.Apellido,c.Identificacion,v.placa,v.ClienteID,v.Modelo
 from clientes as c left join vehiculos as v on c.ClienteID=v.ClienteID;
 
 -- 5 Obtener la cantidad de piezas en inventario para cada pieza
 
 select* from piezas;
 select * from inventario;
 
 select i.PiezaID,p.Nombre,i.Cantidad,p.Descripcion
  from  inventario as i inner join piezas as p on i.PiezaID=p.PiezaID;
  
-- 6. Obtener las citas programadas para un día específico
 select * from citas;
 
 select citas.citaID,citas.VehiculoID from citas
 where DATE(FechaHora)='2023-06-15';
 
 -- 6. Generar una factura para un cliente específico en una fecha determinada
 select * from facturacion;
 select * from clientes;
 
 select CONCAT(c.Nombre,' ',c.Apellido) AS cliente_nombre, f. Fecha,f.Total
 from clientes as c inner join facturacion as f on c.ClienteID=f.ClienteID
 where date(f.Fecha)='2023-08-25' and (f.ClienteID=6);
 
 -- 7. Listar todas las órdenes de compra y sus detalles
  select* from orden_detalles;
  select* from ordenes_compra;
  
  select oc. OrdenID as ordenescompra ,od.*
  from ordenes_compra as oc inner join orden_detalles as od 
  on oc.OrdenID=od.OrdenID;
  
  -- 8. Obtener el costo total de piezas utilizadas en una reparación específica
    
  select p.Nombre,sum(p.Precio*R.Cantidad) as costototal,r.Cantidad,r.ReparacionID
  from piezas as p inner join reparacion_piezas as r 
  on p.PiezaID=r.PiezaID 
  where p.nombre='Exhaust Pipe';
  
-- 9. Obtener el inventario de piezas que necesitan ser reabastecidas (cantidad
-- menor que un umbral)
 select* from piezas;
 select* from inventario;

select p.Nombre,p.Descripcion,i.Cantidad as cantidad_existente,(250-i.cantidad) as faltantes_necesito_reabastecer
from piezas as p inner join inventario as i 
on p.PiezaID=i.PiezaID
where i.cantidad<250;

-- 10. Obtener la lista de servicios más solicitados en un período específico

select * from citas;
select *from servicios;

Select
s.Tipo as servicio,COUNT(c.ServicioID) as cantidad_solicitada
From citas AS c
Inner join servicios as s
on c.ServicioID = s.ServicioID
where c.FechaHora between '2023-06-15' and '2023-09-10'
group by s.Tipo;

-- 11. Obtener el costo total de reparaciones para cada cliente en un período
-- específico

select * from clientes;
select * from reparaciones;
select * from vehiculos;

select CONCAT(c.nombre,' ',c.apellido) as nombre_cliente,sum(r.CostoTotal) as sumatoria ,v.placa
from reparaciones as r 
inner join vehiculos as v on r.VehiculoID=v.VehiculoID
inner join clientes as c on v.ClienteID=c.ClienteID
where r.Fecha between '2023-02-10' and '2023-10-30'
GROUP BY c.ClienteID, nombre_cliente, v.placa
ORDER BY nombre_cliente ASC;

-- 12. Listar los empleados con mayor cantidad de reparaciones realizadas en un
-- período específico
 select * from  empleados;
 select * from reparaciones;
 
 select e.Nombre,e.apellido,r.fecha,r.descripcion, COUNT(e.EmpleadoID) as cantidad_dereparaciones 
 from empleados as e inner join reparaciones as r 
 on e.EmpleadoID=r.EmpleadoID 
 where r.fecha between '2023-02-10' and "2024-04-15"
 group by e.EmpleadoID, e.Nombre
 order by cantidad_dereparaciones DESC;
 
 -- 13. Obtener las piezas más utilizadas en reparaciones durante un período
-- específico

select * from reparaciones;
select * from reparacion_piezas;
select* from piezas;


SELECT p.Nombre, COUNT(rp.PiezaID) AS conteo
FROM reparaciones AS r
INNER JOIN reparacion_piezas AS rp ON r.ReparacionID = rp.ReparacionID
INNER JOIN piezas AS p ON rp.PiezaID = p.PiezaID
WHERE r.fecha BETWEEN '2023-02-10' AND '2023-08-25'
GROUP BY p.Nombre, rp.PiezaID
ORDER BY conteo DESC;

-- 14. Calcular el promedio de costo de reparaciones por vehículo
 select * from reparaciones;
 select * from vehiculos;
 
 select v.vehiculoID,avg(r.CostoTotal)as costopromedioreparaciones
 from vehiculos as v inner join reparaciones as r 
 on v.VehiculoID=r.VehiculoID
 group by v.vehiculoID
 order by v.vehiculoID;

-- 15. Obtener el inventario de piezas por proveedor

select * from inventario;
select * from piezas;
select * from proveedores;

select pi.Nombre as pieza ,sum(i.cantidad) as inventario_piezas,p.Nombre as nombre_proveedor
from inventario as i 
inner join piezas as pi on i.PiezaID=pi.PiezaID
inner join proveedores as p on pi.ProveedorID=p.ProveedorID
group by p.Nombre
order by p.proveedorID;

-- 16. Listar los clientes que no han realizado reparaciones en el último año

select * from reparaciones;
select* from vehiculos;
select* from clientes;

select v.placa,r.Fecha,CONCAT(c.Nombre,' ',c.apellido) as nombrecliente
from reparaciones as r 
inner join vehiculos as v on r.VehiculoID=v.VehiculoID
inner join clientes as c on v.ClienteID=c.ClienteID
where r.fecha not between '2023-02-10' and '2023-06-20' or r.fecha is null;

-- 17. Obtener las ganancias totales del taller en un período específico


select * from factura_detalles;
select * from reparaciones;

SELECT SUM(f.Total) AS ganancias_totales
FROM reparaciones AS r
INNER JOIN factura_detalles AS f ON r.ReparacionID = f.ReparacionID
WHERE r.fecha BETWEEN '2023-02-10' AND '2023-08-25';


-- 19. Obtener el listado de servicios prestados por cada empleado en un período
-- específico

select * from empleados;
select * from citas; 
select * from servicios;

select e.Nombre, e.Apellido, c.FechaHora,s.Tipo
from empleados as e 
inner join citas as c on e.EmpleadoId=c.EmpleadoId
inner join servicios as s on c.ServicioID=s.ServicioID
where month(c.FechaHora)=06;

-- Subconsultas
-- 1. Obtener el cliente que ha gastado más en reparaciones durante el último año.

 
SELECT c.Nombre,c.Apellido,
SUM(r.CostoTotal) AS Total_Gastado
FROM clientes c JOIN vehiculos v ON c.ClienteID = v.ClienteID
JOIN reparaciones r ON v.VehiculoID = r.VehiculoID
WHERE YEAR(r.Fecha) = YEAR(CURRENT_DATE() - INTERVAL 1 YEAR)
GROUP BY c.ClienteID
ORDER BY Total_Gastado DESC
LIMIT 1;

-- 2. Obtener la pieza más utilizada en reparaciones durante el último mes
select * from reparaciones;
select * from reparacion_piezas;
select * from piezas;

select r.Fecha,r.ReparacionID,rp.Cantidad as cantidad ,p.Nombre,p.PiezaID
from reparaciones as r 
inner join reparacion_piezas as rp on r.ReparacionID=rp.ReparacionID
inner join piezas as p on rp.PiezaID=p.PiezaID
where month(r.Fecha)=month(current_date()-interval 1 month)
group by p.piezaID,P.Nombre
order by max(rp.cantidad) desc
limit 1;

-- 3. Obtener los proveedores que suministran las piezas más caras


select p.Nombre as nombre_pieza,p.Precio,pr.ProveedorID,CONCAT(pr.nombre,' ',pr.Apellido) as nombre_proveedor,pr.Email
from piezas as p inner join proveedores as pr on p.ProveedorID=pr.ProveedorID
where p.precio= ( select max(p.precio) from piezas);

-- 4. Listar las reparaciones que no utilizaron piezas específicas durante el último año 


SELECT r.ReparacionID,r.Fecha 
FROM reparaciones AS r 
LEFT JOIN reparacion_piezas AS rp ON r.ReparacionID = rp.ReparacionID
WHERE rp.ReparacionID IS not null and rp.PiezaID !=10
AND YEAR(r.Fecha) = YEAR(CURRENT_DATE() - INTERVAL 1 YEAR);

-- 5 Obtener las piezas que están en inventario por debajo del 10% del stock inicial 

SELECT p.PiezaID, p.Nombre, i.Cantidad AS cantidad_actual, od.Cantidad AS cantidad_inicial
FROM inventario i
JOIN piezas p ON i.PiezaID = p.PiezaID
JOIN orden_detalles od ON p.PiezaID = od.PiezaID
WHERE i.Cantidad < od.Cantidad * 0.10
ORDER BY p.PiezaID;
----------------------
-- PROCEDIMIENTOS-----
----------------------
-- 1. Crear un procedimiento almacenado para insertar una nueva reparación. 
DELIMITER $$
CREATE PROCEDURE insertar_reparacion(
    IN i_Fecha DATETIME,
    IN i_VehiculoID INT,
    IN i_EmpleadoID INT,
    IN i_CostoTotal DOUBLE,
    IN i_Descripcion VARCHAR(50))
BEGIN 
    INSERT INTO Reparaciones (Fecha, VehiculoID, EmpleadoID, CostoTotal, Descripcion) 
    VALUES (i_Fecha, i_VehiculoID, i_EmpleadoID, i_CostoTotal, i_Descripcion);
END $$
DELIMITER ;

CALL insertar_reparacion('2024-11-23 00:00:00', 4, 4, 400, 'Exhaust system repair');

-- 2.Crear un procedimiento almacenado para actualizar el inventario de una pieza.

DELIMITER $$

CREATE PROCEDURE actualizar_inventario_pieza (
    IN P_PiezaID INT,
    IN P_Cantidad INT,
    IN P_ZonaID INT
)
BEGIN
    DECLARE existing_count INT;
	DECLARE msg VARCHAR(255);

    SELECT COUNT(*) INTO existing_count 
    FROM Inventario 
    WHERE PiezaID = P_PiezaID AND ZonaID = P_ZonaID;
    
    IF existing_count > 0 THEN
        UPDATE Inventario 
        SET Cantidad = Cantidad + P_Cantidad 
        WHERE PiezaID = P_PiezaID AND ZonaID = P_ZonaID;
    ELSE
        INSERT INTO Inventario (PiezaID, Cantidad, ZonaID)  
        VALUES (P_PiezaID, P_Cantidad, P_ZonaID);
    END IF;
END$$
DELIMITER ;

CALL actualizar_inventario_pieza(10, 90, 1);

SELECT * FROM  inventario;

-- 3.Crear un procedimiento almacenado para eliminar una cita 

DELIMITER $$

CREATE PROCEDURE eliminarcita(
    IN p_fechahora DATETIME,
    IN p_VehiculoID INT
)
BEGIN 
    DECLARE conteoCount INT;
    SELECT COUNT(*) INTO conteoCount 
    FROM citas 
    WHERE FechaHora = p_fechahora AND VehiculoID = p_VehiculoID;

    IF conteoCount > 0 THEN
        SELECT * FROM citas 
        WHERE FechaHora = p_fechahora AND VehiculoID = p_VehiculoID;

        DELETE FROM citas
        WHERE FechaHora = p_fechahora AND VehiculoID = p_VehiculoID;
    ELSE
        SELECT 'La cita con el ID especificado no fue encontrada.';
    END IF;
END $$

DELIMITER ;
call eliminarcita('2023-08-20 10:30:00',5);
select * from citas;


 -- 4 consulta una factura 

DELIMITER $$

CREATE PROCEDURE ConsultarFacturamejorada(
    IN p_facturaID INT,
    IN p_ClienteID INT
)
BEGIN
    DECLARE facturaCount INT;

    SELECT COUNT(*) INTO facturaCount
    FROM Facturacion
    WHERE FacturaID = p_facturaID AND ClienteID = p_ClienteID;

    IF facturaCount > 0 THEN
        SELECT * FROM Facturacion
        WHERE FacturaID = p_facturaID AND ClienteID = p_ClienteID;
    ELSE
        SELECT 'La factura no fue encontrada.' AS Mensaje;
    END IF;
END $$

DELIMITER ;
select * from facturacion;

call ConsultarFacturamejorada(5,5);
 
-- 5. Crear un procedimiento almacenado para obtener el historial de reparaciones de un vehículo 

Delimiter $$ 

create procedure historial_reparaciones(
      in p_VehiculoID int
      )
      
	BEGIN
    DECLARE reparaCount INT;

    SELECT COUNT(*) INTO reparaCount
    FROM reparaciones
    WHERE vehiculoID = p_vehiculoID; 
    
    
    IF reparaCount > 0 THEN
        SELECT * FROM reparaciones
        WHERE VehiculoID = p_VehiculoID;
    ELSE
        SELECT 'El vehiculo no fue encontrada.' AS Mensaje;
    END IF;
END $$

Delimiter ;

select * from reparaciones;

call historial_reparaciones(4);

-- 6. Crear un procedimiento almacenado para calcular el costo total de reparaciones de un cliente en un período 
select * from clientes;
select * from reparaciones;
DELIMITER $$

CREATE PROCEDURE CalcularCostoTotalReparaciones(
    IN p_ClienteID INT,
    IN p_FechaInicio DATE,
    IN p_FechaFin DATE
)
BEGIN
    DECLARE costoTotal DOUBLE;

    SELECT SUM(r.CostoTotal) INTO costoTotal
    FROM Reparaciones r
    JOIN Vehiculos v ON r.VehiculoID = v.VehiculoID
    WHERE v.ClienteID = p_ClienteID
    AND r.Fecha BETWEEN p_FechaInicio AND p_FechaFin;

    IF costoTotal IS NULL THEN
        SElECT  'costoTotal fue 0';
    END IF;
  SELECT costoTotal AS CostoTotalReparaciones;
END $$

DELIMITER ;

call CalcularCostoTotalReparaciones();

-- 7 

    
      
      

 
 
 









 

 
 
 



  






 
